InitWindow(windowx, windowy, "Hello, Raylib-D!");
SetWindowPosition(1800,0);
SetTargetFPS(60);
import tile;
mixin setupdraw!("tile");
import ship;
mixin setupdraw!("ship");
import ascii;
mixin setupdraw!("ascii");
import hearts;
mixin setupdraw!("hearts");

mixin(import("sound.mix"));

template draw_(){
	void drawtilerow(tilerow a,int y){
		foreach(i,e;a){
			drawtile(e,(i*32).to!int,y,2);
		}
	}
	void drawasciirow(string a,int y){
		foreach(i,e;a){
			drawascii(e,(i*48).to!int,y,1);
		}
	}
	void drawbackground(int size,T)(T bg,int offset){
		import std.range;
		foreach(i,ref row;bg[].enumerate){
			import consants;
			drawtilerow(row,playfieldy-cast(int)(i)*size+offset);
	}}
	void drawwords(int size,T)(T bg,int offset){
		import std.range;
		foreach(i,ref row;bg[].enumerate){
			import consants;
			drawasciirow(row,playfieldy-cast(int)(i)*size+offset);
	}}
	void draw(background bg){
		drawbackground!(32)(bg.tiles,-bg.offset);
		drawwords!(48)(bg.words,0);
	}
	void draw(player a){
		if(a.hp>0){//should this be elsewhere?
			drawship(0,a.x,a.y,2);}
	}
	void draw(bullets bs){
		foreach(b;bs){
			drawtile(b.which,b.x,b.y);
		}
	}
	void draw(enemybullets bs){
		foreach(b;bs){
			drawtile(b.which,b.x,b.y);
		}
	}
	void draw(bigships ss){
		foreach(s;ss){
			drawship(s.type+1,cast(int)s.pos.x,cast(int)s.pos.y,2);
	}}
	void draw(midships ss){
		foreach(s;ss){
			drawship(s.type+4,cast(int)s.pos.x,cast(int)s.pos.y,1.5);
	}}
	void draw(smlships ss){
		foreach(s;ss){
			drawship(s.type+16,cast(int)s.pos.x,cast(int)s.pos.y,1);
	}}
	void draw(collect c){
		final switch(c.type){ with(collectable){
			case mine:
				drawtile(16,c.x,c.y,2); break;
			case life:
				drawtile(24,c.x,c.y,2); break;
			case power:
				drawtile(25,c.x,c.y,2); break;
			case hp:
				drawtile(26,c.x,c.y,2); break;
		}}
	}
	void draw(collectables c){
		foreach(e;c){
			draw(e);
	}}
	void draw(turret t){
		int which(int x){
			switch(x){
				case 0: return 30;
				case 1: return 18;
				case 2: return 17;
				default: assert(0);
			}
		}
		drawtile(29,t.x,t.y,2);
		drawtile(which(t.which),t.x,t.y,2);
	}
	void draw(turrets t){
		foreach(e;t){
			draw(e);
	}}
}

auto draw(T...)(T args){
	draw_!().draw(args);
}
void drawui(player p){
	if(p.hp<=0){//LAZY: death screen
					//HACK: p hp shouldnt go less then 0 but does rn
		DrawRectangle(0,0,playfieldx,playfieldy,Color(128,128,128,128));
		return;
	}
	int x;
	while(p.hp>1){
		drawhearts(3,16*x,0,Colors.RED);
		p.hp-=2;
		x++;
	}
	if(p.hp==1){
		drawhearts(2,16*x,0,Colors.RED);
	}
	x=0;
	while(p.shield>1){
		drawhearts(3,16*x,16,Colors.BLUE);
		p.shield-=2;
		p.maxshield-=2;
		x++;
	}
	if(p.shield==1){
		drawhearts(2,16*x,16,Colors.BLUE);
		x++;
		p.shield-=2;
		p.maxshield-=2;
	}
	while(p.maxshield>1){
		drawhearts(1,16*x,16,Colors.BLUE);
		x++;
		p.shield-=2;
		p.maxshield-=2;
	}
}